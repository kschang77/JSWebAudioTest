<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JS Synthesizer</title>
    <link rel="stylesheet" type="text/css" href="style.css">

</head>

<body>

    <!-- some ideas: let users choose number of scales to show, emulating different keyboard length
                     use a table or dict or map to match the key with frequency to play, instead of hard-coding 
                     label the waveform buttons  and dump the piano background
                     label the keys (determine layout first)
                     other enhancements? -->

    <!-- inspired by JS Synthesizer by Dries Van Hool https://codepen.io/M-McFly/pen/OJNLmmM-->

    <h2>JavaScript Web Audio API Demo</h2>
    <h3>3-octave Synthesizer</h3>
    <!-- <p>This synthesizer is created with javascript using the Web Audio API.<br><i>"Select a sound and start jamming"</i></p> -->
    <div id="frame">
        <div class="btns" id="button1"></div>
        <div class="btns" id="button2"></div>
        <div class="btns" id="button3"></div>
        <div class="btns" id="button4"></div>
        <!-- <div id="shadow"></div> -->
        <div id="piano">
            <div id="light"></div>
            <!-- rest of keys will be dynamically rendered-->
        </div>
    </div>
    <script>
        'use strict'

        const context = new AudioContext();

        var oscillator;
        var osc = "sine";

        function playNotes(a, b) {
            oscillator = context.createOscillator();

            oscillator.type = a;

            oscillator.frequency.value = b;
            const gainNode = context.createGain();

            oscillator.connect(gainNode);
            gainNode.connect(context.destination);

            gainNode.gain.exponentialRampToValueAtTime(0.00001, context.currentTime + 1);

            oscillator.start(0);
        };

        // let's declare the note to freq table
        //for demo purposes, we will only have THREE octaves, instead of 7 or 8 (true piano has 9)
        // which means using c4 as "middle C", or 21 keys (note, most pianos are at least 49 keys)
        // values sourced from https://pages.mtu.edu/~suits/notefreqs.html
        let scale = {
            c3: 130.81,
            d3: 146.83,
            e3: 164.81,
            f3: 174.61,
            g3: 196.0,
            a3: 220.0,
            b3: 246.94,
            c4: 261.63,
            d4: 293.66,
            e4: 329.63,
            f4: 349.23,
            g4: 392.0,
            a4: 440.0,
            b4: 493.88,
            c5: 523.25,
            d5: 587.33,
            e5: 659.25,
            f5: 698.46,
            g5: 783.99,
            a5: 880.0,
            b5: 987.77
        }

        //let's render the keys, just 21 by the scale, 
        let pianoDiv = document.getElementById('piano');
        for (let key of Object.keys(scale)) {
            let keyDiv = document.createElement('div')
            keyDiv.setAttribute("Class", "key")
            keyDiv.setAttribute("id", key)
            pianoDiv.append(keyDiv)
        };


        document.querySelector('#button1').addEventListener('mousedown', function() {
            osc = "sine";
        });
        document.querySelector('#button2').addEventListener('mousedown', function() {
            osc = "square";
        });

        document.querySelector('#button3').addEventListener('mousedown', function() {
            osc = "triangle";
        });
        document.querySelector('#button4').addEventListener('mousedown', function() {
            osc = "sawtooth";
        });


        // can't hardcode the event listener because these are dynamic elements, have
        // to put the event at piano div for bubbling up

        pianoDiv.addEventListener('mousedown', function() {
            event.stopPropagation();
            let tElementid = event.target.id
            if (tElementid.length == 2) { // it's probably 1 of the keys
                let tFreq = scale[tElementid]
                playNotes(osc, tFreq)
            }
        })
    </script>
</body>

</html>